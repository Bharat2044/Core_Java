package com.food.daoimpl;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import com.food.dao.UserDao;
import com.food.model.User;

public class UserDaoImpl implements UserDao {
	private static Connection connection = null;
	
	final static String INSERT_QUERY = "INSERT INTO `user` (`userId`, `username`, `password`, `email`, `address`, `role`, `create_date`, `last_login_date`) VALUES(?, ?, ?, ?, ?, ?, ?)";
	final static String SELECT_QUERY = "SELECT * FROM `user` WHERE `userId` = ?";
	final static String UPDATE_QUERY = "UPDATE `user` WHERE `username` = ?, `password` = ?, `email` = ?, `address` = ?, `role` = ? WHERE `userId` = ?";
	final static String DELETE_QUERY = "DELETE FROM `user` WHERE `userId` = ?";
	final static String SELECT_ALL_QUERY = "SELECT * FROM `user`";
	
	public UserDaoImpl() {
		String url = "jdbc:mysql://localhost:3306/foods";
		String username = "root";
		String password = "test";

		try {
			Class.forName("com.mysql.cj.jdbc.Driver");
			connection = DriverManager.getConnection(url, username, password);
		} catch (ClassNotFoundException | SQLException e) {
			e.printStackTrace();
		} 
	}

	@Override
	public void addUser(User user) {
		PreparedStatement pstmt = null;
		
		try {
			pstmt = connection.prepareStatement(INSERT_QUERY);
			pstmt.setInt(1, user.getUserId());
			pstmt.setString(2, user.getUsername());
			pstmt.setString(3, user.getPassword());
			pstmt.setString(4, user.getEmail());
			pstmt.setString(5, user.getAddress());
			pstmt.setString(6, user.getRole());
			
			pstmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	@Override
	public User getUser(int userId) {
		PreparedStatement pstmt = null;
		ResultSet res = null;
		User user = null;
		
		try {
			pstmt = connection.prepareStatement(SELECT_QUERY);
			pstmt.setInt(1, userId);
			
			res = pstmt.executeQuery();
			
			if(res.next()) {
				int id = res.getInt("userId");
				String username = res.getString("username");
				String password = res.getString("password");
				String email = res.getString("email");
				String address = res.getString("address");
				String role = res.getString("role");
				Date createDate = res.getDate("createDate");
				Date lastLoginDate = res.getDate("lastLoginDate");
				
				user = new User(id, username, password, email, address, role, createDate, lastLoginDate);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return user;
	}

	@Override
	public void updateUser(User user) {
		PreparedStatement pstmt = null;
		
		try {
			pstmt = connection.prepareStatement(UPDATE_QUERY);
			pstmt.setString(1, user.getUsername());
			pstmt.setString(2, user.getPassword());
			pstmt.setString(3, user.getEmail());
			pstmt.setString(4, user.getAddress());
			pstmt.setString(5, user.getRole());
			pstmt.setInt(6, user.getUserId());
			
			pstmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	@Override
	public void deleteUser(int userId) {
		PreparedStatement pstmt = null;
		
		try {
			pstmt = connection.prepareStatement(DELETE_QUERY);
			pstmt.setInt(1, userId);
			
			pstmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	@Override
	public List<User> getAllUsers() {
		Statement stmt = null;
		ResultSet res = null;
		User user = null;
		ArrayList<User> userList = new ArrayList<>();
		
		try {
			stmt = connection.createStatement();
			
			res = stmt.executeQuery(SELECT_ALL_QUERY);
			
			while (res.next()) {
				int userId = res.getInt("userId");
				String username = res.getString("username");
				String password = res.getString("password");
				String email = res.getString("email");
				String address = res.getString("address");
				String role = res.getString("role");
				Date createDate = res.getDate("createDate");
				Date lastLoginDate = res.getDate("lastLoginDate");
				
				user = new User(userId, username, password, email, address, role, createDate, lastLoginDate);
				userList.add(user);
			}
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
				
		return userList;
	}
}
